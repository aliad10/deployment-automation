// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "forge-std/Script.sol";
import "forge-std/console.sol";

import {IThreeOneThird} from "../../../contracts/external-interfaces/IThreeOneThird.sol";
import "./../../deploy/Addresses.sol";
import "./../vaultInfo/VaultInfo.sol";

interface IComptroller {
    function callOnExtension(address _extension, uint256 _actionId, bytes calldata _callArgs) external;
}

contract ThreeOneThirdTrades is Script {
    address public constant COMPTROLLER = VultAddresses.COMPTROLLER_PROXY;
    address public constant INTEGRATION_MANAGER = Addresses.INTEGRATION_MANAGER;
    address public constant THREEONETHIRD_ADAPTER = 0x5a1c0E89133C4Cd844A8B345370565f1368A79A8;

    function decodeSwapData(bytes calldata data)
        external
        pure
        returns (bytes4 selector, IThreeOneThird.Trade[] memory trades, bool checkFeelessWallets)
    {
        // Extract function selector (first 4 bytes)
        selector = bytes4(data[:4]);

        (trades, checkFeelessWallets) = abi.decode(data[4:], (IThreeOneThird.Trade[], bool));
    }

    function run() external {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        vm.startBroadcast(deployerPrivateKey);

        IComptroller comptroller = IComptroller(COMPTROLLER);

        console.log("Executing 31Third batch trade...");

        // Raw API calldata from 31Third (includes selector + encoded args)
        bytes memory rawApiData = hex"9396f4590000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000062c4000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000054265626f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002644dcebcba00000000000000000000000000000000000000000000000000000000682c551a000000000000000000000000d20c024560cca40288c05bab650ac087ae9b0f6e00000000000000000000000051c72848c68a965f66fa7a88855f9f7784502a7f0000000000000000000000000000000000000000000000000000032db119b099000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000062c4000000000000000000000000d20c024560cca40288c05bab650ac087ae9b0f6e00000000000000000000000000000000000000000000000000000000000000006d226877e2cb39d0b5ac46f35fc180580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000041fcc92f26e449e58d250b716fb29de0b5e4621003944675c6bbc2cba09f32f13f341e691c4f57e933ce96ca0ab992859c4cbfea37f2cbe1c0f00c29671456f22c1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041318822a4c99fd2c1cea949348653cbf7298bc7e351950e9a9899996704a4f3310d3050969ca1b962a56618b0c979676563b81852ebbdf0ba751675cc017b49e91b00000000000000000000000000000000000000000000000000000000000000"; // [truncated here for brevity â€“ use full hex from your previous message]

        (bytes4 selector, IThreeOneThird.Trade[] memory trades, bool checkFeelessWallets) =
            this.decodeSwapData(rawApiData);

        bytes memory actionData = abi.encode(trades, IThreeOneThird.BatchTradeConfig(checkFeelessWallets, true));

        bytes memory callArgs =
            abi.encode(THREEONETHIRD_ADAPTER, bytes4(keccak256("takeOrder(address,bytes,bytes)")), actionData);

            

        comptroller.callOnExtension(
            INTEGRATION_MANAGER,
            0, // actionId for callOnIntegration
            callArgs
        );

        console.log("Trade submitted via Enzyme IntegrationManager.");
        vm.stopBroadcast();
    }
}
