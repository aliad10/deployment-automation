{"abi":[{"type":"constructor","inputs":[{"name":"_integrationManager","type":"address","internalType":"address"},{"name":"_balancerVault","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"claimRewards","inputs":[{"name":"_vaultProxy","type":"address","internalType":"address"},{"name":"_actionData","type":"bytes","internalType":"bytes"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getIntegrationManager","inputs":[],"outputs":[{"name":"integrationManager_","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"lendAndStake","inputs":[{"name":"_vaultProxy","type":"address","internalType":"address"},{"name":"_actionData","type":"bytes","internalType":"bytes"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"parseAssetsForAction","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"_selector","type":"bytes4","internalType":"bytes4"},{"name":"_actionData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"spendAssetsHandleType_","type":"uint8","internalType":"enum IIntegrationManager.SpendAssetsHandleType"},{"name":"spendAssets_","type":"address[]","internalType":"address[]"},{"name":"spendAssetAmounts_","type":"uint256[]","internalType":"uint256[]"},{"name":"incomingAssets_","type":"address[]","internalType":"address[]"},{"name":"minIncomingAssetAmounts_","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"stake","inputs":[{"name":"_vaultProxy","type":"address","internalType":"address"},{"name":"_actionData","type":"bytes","internalType":"bytes"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"takeOrder","inputs":[{"name":"_vaultProxy","type":"address","internalType":"address"},{"name":"_actionData","type":"bytes","internalType":"bytes"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unstake","inputs":[{"name":"_vaultProxy","type":"address","internalType":"address"},{"name":"_actionData","type":"bytes","internalType":"bytes"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unstakeAndRedeem","inputs":[{"name":"_vaultProxy","type":"address","internalType":"address"},{"name":"_actionData","type":"bytes","internalType":"bytes"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claimRewards(address,bytes,bytes)":"b9dfbacc","getIntegrationManager()":"e7c45690","lendAndStake(address,bytes,bytes)":"29fa046e","parseAssetsForAction(address,bytes4,bytes)":"c54efee5","stake(address,bytes,bytes)":"fa7dd04d","takeOrder(address,bytes,bytes)":"03e38a2b","unstake(address,bytes,bytes)":"68e30677","unstakeAndRedeem(address,bytes,bytes)":"8334eb99"},"rawMetadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lendAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"takeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"unstakeAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Foundation <security@enzyme.finance>\",\"details\":\"Rewards tokens are not included as incoming assets for claimRewards()\",\"kind\":\"dev\",\"methods\":{\"claimRewards(address,bytes,bytes)\":{\"details\":\"Needs `onlyIntegrationManager` because Minter claiming permission is given by the fund\",\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"lendAndStake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"parseAssetsForAction(address,bytes4,bytes)\":{\"params\":{\"_actionData\":\"The encoded parameters for the callOnIntegration\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"stake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"takeOrder(address,bytes,bytes)\":{\"details\":\"All `_actionData` inputs are Balancer `batchSwap()` params, with the exception of `stakingTokens`. \\\"Spend assets\\\" and \\\"incoming assets\\\" are parsed from the `limits` values corresponding to `assets`: - limit > 0 is a spend asset - limit < 0 is an incoming asset (including a partially-consumed intermediary asset) - limit == 0 is an intermediary asset that is completely consumed in the swap This function can also used for \\\"LPing\\\" with ComposableStablePool instances, since those pools contain their own BPT as an underlying asset. `stakingTokens` facilitates \\\"lend and stake\\\" and \\\"unstake and redeem\\\"-like functionality for such pools. If `stakingTokens[i]` is non-empty, it is considered to be the actual spend/incoming asset that must be unstaked to / staked from the BPT specified in `assets[i]` before/after the batchSawp().\",\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstake(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstakeAndRedeem(address,bytes,bytes)\":{\"params\":{\"_actionData\":\"Data specific to this action\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"BalancerV2LiquidityAdapterBase Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(address,bytes,bytes)\":{\"notice\":\"Claims all rewards\"},\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"lendAndStake(address,bytes,bytes)\":{\"notice\":\"Lends assets for LP tokens, then stakes the received LP tokens\"},\"parseAssetsForAction(address,bytes4,bytes)\":{\"notice\":\"Parses the expected assets to receive from a call on integration\"},\"stake(address,bytes,bytes)\":{\"notice\":\"Stakes LP tokens\"},\"takeOrder(address,bytes,bytes)\":{\"notice\":\"Swaps assets on Balancer via batchSwap()\"},\"unstake(address,bytes,bytes)\":{\"notice\":\"Unstakes LP tokens\"},\"unstakeAndRedeem(address,bytes,bytes)\":{\"notice\":\"Unstakes LP tokens, then redeems them\"}},\"notice\":\"Base adapter for liquidity provision in Balancer V2 pools. Implementing contracts can allow staking via Balancer gauges, Aura, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/bases/BalancerV2LiquidityAdapterBase.sol\":\"BalancerV2LiquidityAdapterBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\":@uniswap/v3-core/=lib/uniswap-v3-core/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":morpho-blue/=lib/morpho-blue/src/libraries/\",\":openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\":openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\":openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\":uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\":uniswap-v3-core/=lib/uniswap-v3-core/\",\":uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\"]},\"sources\":{\"contracts/external-interfaces/IBalancerV2Vault.sol\":{\"keccak256\":\"0x14159eb2ca0ded332f0f11976d8dc063484d054dea3e6bc88f837682835ab4ba\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5e205be77b17163e651c7530640dd18908e44acc6e619e2e2799f4b10e76f332\",\"dweb:/ipfs/QmWEeg1yGzGU99nRiRYrVKKqjz9JguZFbh2PneTLZfpyuJ\"]},\"contracts/external-interfaces/IERC20.sol\":{\"keccak256\":\"0x0e3b292dac297f351b4f8147d10e7d8bc870daa4e4651ac12ad78ba6b1f3dfb0\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://06041127874184dc391018da2eefe673636750696c9135bde6bbeab1c7640419\",\"dweb:/ipfs/QmeNgv1D9NYTGnhEGjujATjsHD1KFxtqehGB1nfnEDy629\"]},\"contracts/release/extensions/integration-manager/IIntegrationAdapter.sol\":{\"keccak256\":\"0xd0291561e13f8849f73b163dd3c95f1c2901eb5f456ad0615894c5a7af345c0c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://165b92424170a455cc0be227e94d5a06b86742d4e4da4eec5ccd9da29a3b3ea5\",\"dweb:/ipfs/QmeUwPkNchhvDQ2AN6HRLF1chKZzYPCUDf61SBpQNKJNe3\"]},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"keccak256\":\"0x2f0136b76f3ef0503e6b552b3b8c9a8332edc5dd41adbd05e8125092b737b49f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d5ae1f386364c5389ab73dc06f4084bedbb4b2efdefa0cab484954075d91e84d\",\"dweb:/ipfs/QmTvVSpjb1D6787PorJonCYEgN3xPK9CWXkJLS3txBXQTS\"]},\"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/AdapterBase.sol\":{\"keccak256\":\"0x7a1893c28bee9f3c0a63e7b33fab4c594a8434e8887426dc19668eb204854203\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d66305750077dbea6cdf467cadf4d5aae9c5e38b7063a3c9282e68ca46cdae06\",\"dweb:/ipfs/Qmca51oKMN7Y1nufrKUb2iqm5w3N3SEM38E4jnYtTJEM5d\"]},\"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/actions/BalancerV2ActionsMixin.sol\":{\"keccak256\":\"0xa242d7a94518e1aac294cba12749ee1c9a66060aae02454c2e346964ca385297\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ad5afcb2584670c72b6cb3f001d777f9d792d9f7b98a96d8896585328a49cf11\",\"dweb:/ipfs/QmZpAZ1fXkgMPkio2NZd21NnHcANrpXA7izr2EPrfFLMuL\"]},\"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/bases/BalancerV2LiquidityAdapterBase.sol\":{\"keccak256\":\"0x900c38cdcfe56516c9654b5c06992eb839b9ba495c72f96cb1ca017152dfa7cc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://19797a5cafaa5e0becb649895e8871f7d31b04460f8b47cc81a14daeb6ca4604\",\"dweb:/ipfs/Qmd7VRnTHjkSZGoN2GRF4CTFLsn96nTJ7YjxRxhrBVMYCp\"]},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"keccak256\":\"0x274d54f6498b22c0d4751c46b785fd9ea2e3d549d75ea1f11c4bdfbf384c0c7a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://623432901256713b23e734bad706910a615bb7e63e04d8fcfc3dd08a20ae2dc1\",\"dweb:/ipfs/QmVv33REA89xAmT657zowDyxvGaDPV2ndmiQh4aHmgqqCU\"]},\"contracts/utils/0.6.12/AddressArrayLib.sol\":{\"keccak256\":\"0x8548f80fc919e680af321ed7a1f4d77a06918a79032b4b598e3b6540a4b57a05\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a54c50dd98483302a0ef9bf99a6db8c572dfdfbc058b5eaed2e5c4148a6d5ec6\",\"dweb:/ipfs/QmZYUtUPWosnwZAy5Ji9pmDfhsn8KbqJJsnB3AeJaNf6gn\"]},\"contracts/utils/0.6.12/AssetHelpers.sol\":{\"keccak256\":\"0xdcbca32fc24227c83716a1e9e3454c2ca3f2d08ca7c41d72f1580da0bc197429\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://dc01e6b7d67173358c841d1328cec58e5dc8e316788ebeebab2ad0a5cdc8e67b\",\"dweb:/ipfs/QmVM3hJd4LSVtAknQ7hCc5hL2NtFH3ueJJbhZ8UykuAVtq\"]},\"contracts/utils/0.6.12/open-zeppelin/WrappedSafeERC20.sol\":{\"keccak256\":\"0x7fffda12a04812ec4e0f798784290400d3ef5c6b2003576a9112a4237328bd7d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5f3789d00110fb9e342392489fad0965ca03c3992decde861219a0c801a600b5\",\"dweb:/ipfs/QmQd48HboGbd5jcpadGySaPhE6cqLQN7Z2sDDVJgUYBeVU\"]},\"lib/openzeppelin-solc-0.6/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"lib/openzeppelin-solc-0.6/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"lib/openzeppelin-solc-0.6/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a\",\"dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ\"]},\"lib/openzeppelin-solc-0.6/contracts/utils/Address.sol\":{\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c\",\"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_integrationManager","type":"address"},{"internalType":"address","name":"_balancerVault","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"_vaultProxy","type":"address"},{"internalType":"bytes","name":"_actionData","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"claimRewards"},{"inputs":[],"stateMutability":"view","type":"function","name":"getIntegrationManager","outputs":[{"internalType":"address","name":"integrationManager_","type":"address"}]},{"inputs":[{"internalType":"address","name":"_vaultProxy","type":"address"},{"internalType":"bytes","name":"_actionData","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"lendAndStake"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes4","name":"_selector","type":"bytes4"},{"internalType":"bytes","name":"_actionData","type":"bytes"}],"stateMutability":"view","type":"function","name":"parseAssetsForAction","outputs":[{"internalType":"enum IIntegrationManager.SpendAssetsHandleType","name":"spendAssetsHandleType_","type":"uint8"},{"internalType":"address[]","name":"spendAssets_","type":"address[]"},{"internalType":"uint256[]","name":"spendAssetAmounts_","type":"uint256[]"},{"internalType":"address[]","name":"incomingAssets_","type":"address[]"},{"internalType":"uint256[]","name":"minIncomingAssetAmounts_","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"_vaultProxy","type":"address"},{"internalType":"bytes","name":"_actionData","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"stake"},{"inputs":[{"internalType":"address","name":"_vaultProxy","type":"address"},{"internalType":"bytes","name":"_actionData","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"takeOrder"},{"inputs":[{"internalType":"address","name":"_vaultProxy","type":"address"},{"internalType":"bytes","name":"_actionData","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"unstake"},{"inputs":[{"internalType":"address","name":"_vaultProxy","type":"address"},{"internalType":"bytes","name":"_actionData","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"unstakeAndRedeem"}],"devdoc":{"kind":"dev","methods":{"claimRewards(address,bytes,bytes)":{"details":"Needs `onlyIntegrationManager` because Minter claiming permission is given by the fund","params":{"_actionData":"Data specific to this action","_vaultProxy":"The VaultProxy of the calling fund"}},"getIntegrationManager()":{"returns":{"integrationManager_":"The `INTEGRATION_MANAGER` variable value"}},"lendAndStake(address,bytes,bytes)":{"params":{"_actionData":"Data specific to this action","_vaultProxy":"The VaultProxy of the calling fund"}},"parseAssetsForAction(address,bytes4,bytes)":{"params":{"_actionData":"The encoded parameters for the callOnIntegration","_selector":"The function selector for the callOnIntegration"},"returns":{"incomingAssets_":"The assets to receive in the call","minIncomingAssetAmounts_":"The min asset amounts to receive in the call","spendAssetAmounts_":"The max asset amounts to spend in the call","spendAssetsHandleType_":"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)","spendAssets_":"The assets to spend in the call"}},"stake(address,bytes,bytes)":{"params":{"_actionData":"Data specific to this action","_vaultProxy":"The VaultProxy of the calling fund"}},"takeOrder(address,bytes,bytes)":{"details":"All `_actionData` inputs are Balancer `batchSwap()` params, with the exception of `stakingTokens`. \"Spend assets\" and \"incoming assets\" are parsed from the `limits` values corresponding to `assets`: - limit > 0 is a spend asset - limit < 0 is an incoming asset (including a partially-consumed intermediary asset) - limit == 0 is an intermediary asset that is completely consumed in the swap This function can also used for \"LPing\" with ComposableStablePool instances, since those pools contain their own BPT as an underlying asset. `stakingTokens` facilitates \"lend and stake\" and \"unstake and redeem\"-like functionality for such pools. If `stakingTokens[i]` is non-empty, it is considered to be the actual spend/incoming asset that must be unstaked to / staked from the BPT specified in `assets[i]` before/after the batchSawp().","params":{"_actionData":"Data specific to this action","_vaultProxy":"The VaultProxy of the calling fund"}},"unstake(address,bytes,bytes)":{"params":{"_actionData":"Data specific to this action","_vaultProxy":"The VaultProxy of the calling fund"}},"unstakeAndRedeem(address,bytes,bytes)":{"params":{"_actionData":"Data specific to this action","_vaultProxy":"The VaultProxy of the calling fund"}}},"version":1},"userdoc":{"kind":"user","methods":{"claimRewards(address,bytes,bytes)":{"notice":"Claims all rewards"},"getIntegrationManager()":{"notice":"Gets the `INTEGRATION_MANAGER` variable"},"lendAndStake(address,bytes,bytes)":{"notice":"Lends assets for LP tokens, then stakes the received LP tokens"},"parseAssetsForAction(address,bytes4,bytes)":{"notice":"Parses the expected assets to receive from a call on integration"},"stake(address,bytes,bytes)":{"notice":"Stakes LP tokens"},"takeOrder(address,bytes,bytes)":{"notice":"Swaps assets on Balancer via batchSwap()"},"unstake(address,bytes,bytes)":{"notice":"Unstakes LP tokens"},"unstakeAndRedeem(address,bytes,bytes)":{"notice":"Unstakes LP tokens, then redeems them"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/","@uniswap/v3-core/=lib/uniswap-v3-core/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","morpho-blue/=lib/morpho-blue/src/libraries/","openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/","openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/","openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/","uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/","uniswap-v3-core/=lib/uniswap-v3-core/","uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/"],"optimizer":{"runs":200,"details":{"peephole":true,"jumpdestRemover":true,"orderLiterals":true,"deduplicate":true,"cse":true,"constantOptimizer":true,"yul":false}},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/bases/BalancerV2LiquidityAdapterBase.sol":"BalancerV2LiquidityAdapterBase"},"evmVersion":"istanbul","libraries":{}},"sources":{"contracts/external-interfaces/IBalancerV2Vault.sol":{"keccak256":"0x14159eb2ca0ded332f0f11976d8dc063484d054dea3e6bc88f837682835ab4ba","urls":["bzz-raw://5e205be77b17163e651c7530640dd18908e44acc6e619e2e2799f4b10e76f332","dweb:/ipfs/QmWEeg1yGzGU99nRiRYrVKKqjz9JguZFbh2PneTLZfpyuJ"],"license":"GPL-3.0"},"contracts/external-interfaces/IERC20.sol":{"keccak256":"0x0e3b292dac297f351b4f8147d10e7d8bc870daa4e4651ac12ad78ba6b1f3dfb0","urls":["bzz-raw://06041127874184dc391018da2eefe673636750696c9135bde6bbeab1c7640419","dweb:/ipfs/QmeNgv1D9NYTGnhEGjujATjsHD1KFxtqehGB1nfnEDy629"],"license":"GPL-3.0"},"contracts/release/extensions/integration-manager/IIntegrationAdapter.sol":{"keccak256":"0xd0291561e13f8849f73b163dd3c95f1c2901eb5f456ad0615894c5a7af345c0c","urls":["bzz-raw://165b92424170a455cc0be227e94d5a06b86742d4e4da4eec5ccd9da29a3b3ea5","dweb:/ipfs/QmeUwPkNchhvDQ2AN6HRLF1chKZzYPCUDf61SBpQNKJNe3"],"license":"GPL-3.0"},"contracts/release/extensions/integration-manager/IIntegrationManager.sol":{"keccak256":"0x2f0136b76f3ef0503e6b552b3b8c9a8332edc5dd41adbd05e8125092b737b49f","urls":["bzz-raw://d5ae1f386364c5389ab73dc06f4084bedbb4b2efdefa0cab484954075d91e84d","dweb:/ipfs/QmTvVSpjb1D6787PorJonCYEgN3xPK9CWXkJLS3txBXQTS"],"license":"GPL-3.0"},"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/AdapterBase.sol":{"keccak256":"0x7a1893c28bee9f3c0a63e7b33fab4c594a8434e8887426dc19668eb204854203","urls":["bzz-raw://d66305750077dbea6cdf467cadf4d5aae9c5e38b7063a3c9282e68ca46cdae06","dweb:/ipfs/Qmca51oKMN7Y1nufrKUb2iqm5w3N3SEM38E4jnYtTJEM5d"],"license":"GPL-3.0"},"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/actions/BalancerV2ActionsMixin.sol":{"keccak256":"0xa242d7a94518e1aac294cba12749ee1c9a66060aae02454c2e346964ca385297","urls":["bzz-raw://ad5afcb2584670c72b6cb3f001d777f9d792d9f7b98a96d8896585328a49cf11","dweb:/ipfs/QmZpAZ1fXkgMPkio2NZd21NnHcANrpXA7izr2EPrfFLMuL"],"license":"GPL-3.0"},"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/bases/BalancerV2LiquidityAdapterBase.sol":{"keccak256":"0x900c38cdcfe56516c9654b5c06992eb839b9ba495c72f96cb1ca017152dfa7cc","urls":["bzz-raw://19797a5cafaa5e0becb649895e8871f7d31b04460f8b47cc81a14daeb6ca4604","dweb:/ipfs/Qmd7VRnTHjkSZGoN2GRF4CTFLsn96nTJ7YjxRxhrBVMYCp"],"license":"GPL-3.0"},"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol":{"keccak256":"0x274d54f6498b22c0d4751c46b785fd9ea2e3d549d75ea1f11c4bdfbf384c0c7a","urls":["bzz-raw://623432901256713b23e734bad706910a615bb7e63e04d8fcfc3dd08a20ae2dc1","dweb:/ipfs/QmVv33REA89xAmT657zowDyxvGaDPV2ndmiQh4aHmgqqCU"],"license":"GPL-3.0"},"contracts/utils/0.6.12/AddressArrayLib.sol":{"keccak256":"0x8548f80fc919e680af321ed7a1f4d77a06918a79032b4b598e3b6540a4b57a05","urls":["bzz-raw://a54c50dd98483302a0ef9bf99a6db8c572dfdfbc058b5eaed2e5c4148a6d5ec6","dweb:/ipfs/QmZYUtUPWosnwZAy5Ji9pmDfhsn8KbqJJsnB3AeJaNf6gn"],"license":"GPL-3.0"},"contracts/utils/0.6.12/AssetHelpers.sol":{"keccak256":"0xdcbca32fc24227c83716a1e9e3454c2ca3f2d08ca7c41d72f1580da0bc197429","urls":["bzz-raw://dc01e6b7d67173358c841d1328cec58e5dc8e316788ebeebab2ad0a5cdc8e67b","dweb:/ipfs/QmVM3hJd4LSVtAknQ7hCc5hL2NtFH3ueJJbhZ8UykuAVtq"],"license":"GPL-3.0"},"contracts/utils/0.6.12/open-zeppelin/WrappedSafeERC20.sol":{"keccak256":"0x7fffda12a04812ec4e0f798784290400d3ef5c6b2003576a9112a4237328bd7d","urls":["bzz-raw://5f3789d00110fb9e342392489fad0965ca03c3992decde861219a0c801a600b5","dweb:/ipfs/QmQd48HboGbd5jcpadGySaPhE6cqLQN7Z2sDDVJgUYBeVU"],"license":"GPL-3.0"},"lib/openzeppelin-solc-0.6/contracts/math/SafeMath.sol":{"keccak256":"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52","urls":["bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c","dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR"],"license":"MIT"},"lib/openzeppelin-solc-0.6/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5","urls":["bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08","dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC"],"license":"MIT"},"lib/openzeppelin-solc-0.6/contracts/token/ERC20/SafeERC20.sol":{"keccak256":"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc","urls":["bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a","dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ"],"license":"MIT"},"lib/openzeppelin-solc-0.6/contracts/utils/Address.sol":{"keccak256":"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea","urls":["bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c","dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN"],"license":"MIT"}},"version":1},"id":199}