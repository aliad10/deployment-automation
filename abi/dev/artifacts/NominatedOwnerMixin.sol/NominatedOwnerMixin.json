{"abi":[{"type":"function","name":"claimOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getNominatedOwner","inputs":[],"outputs":[{"name":"nominatedOwner_","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getOwner","inputs":[],"outputs":[{"name":"owner_","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setNominatedOwner","inputs":[{"name":"_nextNominatedOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"NominatedOwnerSet","inputs":[{"name":"nominatedOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OwnerSet","inputs":[{"name":"owner","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claimOwnership()":"4e71e0c8","getNominatedOwner()":"288b6a36","getOwner()":"893d20e8","setNominatedOwner(address)":"728e17a0"},"rawMetadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"}],\"name\":\"NominatedOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nominatedOwner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextNominatedOwner\",\"type\":\"address\"}],\"name\":\"setNominatedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Foundation <security@enzyme.finance>\",\"details\":\"Initial owner must be set in inheriting contract via __setOwner()\",\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"Note that this claims process means that `owner` can never be reset to address(0)\"},\"getNominatedOwner()\":{\"returns\":{\"nominatedOwner_\":\"The next contract owner nominee\"}},\"getOwner()\":{\"returns\":{\"owner_\":\"The contract owner\"}},\"setNominatedOwner(address)\":{\"params\":{\"_nextNominatedOwner\":\"The account to nominate\"}}},\"title\":\"NominatedOwnerMixin Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Claim ownership of the contract\"},\"getNominatedOwner()\":{\"notice\":\"Gets the account that is nominated to be the next contract owner\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"setNominatedOwner(address)\":{\"notice\":\"Nominate a new contract owner\"}},\"notice\":\"Mixin contract for a nominated contract ownership transfer pattern\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/0.6.12/NominatedOwnerMixin.sol\":\"NominatedOwnerMixin\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\":@uniswap/v3-core/=lib/uniswap-v3-core/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":morpho-blue/=lib/morpho-blue/src/libraries/\",\":openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\":openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\":openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\":uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\":uniswap-v3-core/=lib/uniswap-v3-core/\",\":uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\"]},\"sources\":{\"contracts/utils/0.6.12/NominatedOwnerMixin.sol\":{\"keccak256\":\"0xf856706e60d186874a40d7a7bc9371d43d2cb3b760902a420c025585a92c2b58\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://64cf3a0ddfd5e789d2a5798b6b17338b1d07ed7c4c6252381386f21a3e5f9db3\",\"dweb:/ipfs/QmbqvQagi7ryNCjBFUnhd2nettvEWTaBF6wcdzvzSwc3X4\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"nominatedOwner","type":"address","indexed":true}],"type":"event","name":"NominatedOwnerSet","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":false}],"type":"event","name":"OwnerSet","anonymous":false},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"claimOwnership"},{"inputs":[],"stateMutability":"view","type":"function","name":"getNominatedOwner","outputs":[{"internalType":"address","name":"nominatedOwner_","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getOwner","outputs":[{"internalType":"address","name":"owner_","type":"address"}]},{"inputs":[{"internalType":"address","name":"_nextNominatedOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setNominatedOwner"}],"devdoc":{"kind":"dev","methods":{"claimOwnership()":{"details":"Note that this claims process means that `owner` can never be reset to address(0)"},"getNominatedOwner()":{"returns":{"nominatedOwner_":"The next contract owner nominee"}},"getOwner()":{"returns":{"owner_":"The contract owner"}},"setNominatedOwner(address)":{"params":{"_nextNominatedOwner":"The account to nominate"}}},"version":1},"userdoc":{"kind":"user","methods":{"claimOwnership()":{"notice":"Claim ownership of the contract"},"getNominatedOwner()":{"notice":"Gets the account that is nominated to be the next contract owner"},"getOwner()":{"notice":"Gets the owner of this contract"},"setNominatedOwner(address)":{"notice":"Nominate a new contract owner"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/","@uniswap/v3-core/=lib/uniswap-v3-core/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","morpho-blue/=lib/morpho-blue/src/libraries/","openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/","openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/","openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/","uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/","uniswap-v3-core/=lib/uniswap-v3-core/","uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"contracts/utils/0.6.12/NominatedOwnerMixin.sol":"NominatedOwnerMixin"},"evmVersion":"istanbul","libraries":{}},"sources":{"contracts/utils/0.6.12/NominatedOwnerMixin.sol":{"keccak256":"0xf856706e60d186874a40d7a7bc9371d43d2cb3b760902a420c025585a92c2b58","urls":["bzz-raw://64cf3a0ddfd5e789d2a5798b6b17338b1d07ed7c4c6252381386f21a3e5f9db3","dweb:/ipfs/QmbqvQagi7ryNCjBFUnhd2nettvEWTaBF6wcdzvzSwc3X4"],"license":"GPL-3.0"}},"version":1},"id":266}